/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import { Provider, TransactionRequest } from '@ethersproject/providers';
import type {
  ERC1155NonReceiverMock,
  ERC1155NonReceiverMockInterface,
} from '../ERC1155NonReceiverMock';

const _abi = [
  {
    inputs: [],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    inputs: [],
    name: 'hello',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
];

const _bytecode =
  '0x608060405234801561001057600080fd5b506101bd806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c806319ff1d2114610030575b600080fd5b61003861004e565b60405161004591906100e0565b60405180910390f35b60606000805461005d90610133565b80601f016020809104026020016040519081016040528092919081815260200182805461008990610133565b80156100d65780601f106100ab576101008083540402835291602001916100d6565b820191906000526020600020905b8154815290600101906020018083116100b957829003601f168201915b5050505050905090565b6000602080835283518082850152825b8181101561010c578581018301518582016040015282016100f0565b8181111561011d5783604083870101525b50601f01601f1916929092016040019392505050565b600181811c9082168061014757607f821691505b60208210811415610181577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b5091905056fea2646970667358221220f7e67a7b2cd731a4574a8184beff7ae2f887815b6a86e40865fe5737cb90641364736f6c63430008040033';

type ERC1155NonReceiverMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC1155NonReceiverMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC1155NonReceiverMock__factory extends ContractFactory {
  constructor(...args: ERC1155NonReceiverMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = 'ERC1155NonReceiverMock';
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ERC1155NonReceiverMock> {
    return super.deploy(overrides || {}) as Promise<ERC1155NonReceiverMock>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): ERC1155NonReceiverMock {
    return super.attach(address) as ERC1155NonReceiverMock;
  }
  connect(signer: Signer): ERC1155NonReceiverMock__factory {
    return super.connect(signer) as ERC1155NonReceiverMock__factory;
  }
  static readonly contractName: 'ERC1155NonReceiverMock';
  public readonly contractName: 'ERC1155NonReceiverMock';
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC1155NonReceiverMockInterface {
    return new utils.Interface(_abi) as ERC1155NonReceiverMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ERC1155NonReceiverMock {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as ERC1155NonReceiverMock;
  }
}
