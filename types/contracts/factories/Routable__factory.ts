/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import { Provider, TransactionRequest } from '@ethersproject/providers';
import type { Routable, RoutableInterface } from '../Routable';

const _abi = [
  {
    inputs: [
      {
        internalType: 'address',
        name: 'router',
        type: 'address',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'previousRouter',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'newRouter',
        type: 'address',
      },
    ],
    name: 'RouterTransferred',
    type: 'event',
  },
  {
    inputs: [],
    name: 'router',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
];

const _bytecode =
  '0x608060405234801561001057600080fd5b5060405161014838038061014883398101604081905261002f9161007d565b600080546001600160a01b0319166001600160a01b03831690811782556040519091907ff38c14967d50d29fa2223efd2644004cbc5df42d86d956da07481996fc507ced908290a3506100ab565b60006020828403121561008e578081fd5b81516001600160a01b03811681146100a4578182fd5b9392505050565b608f806100b96000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063f887ea4014602d575b600080fd5b6000546040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f3fea264697066735822122027f1296ae92ddd81e0886a797733d4f5f54415d4e608dae184e5dfc40cdfef4164736f6c63430008040033';

type RoutableConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RoutableConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Routable__factory extends ContractFactory {
  constructor(...args: RoutableConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = 'Routable';
  }

  deploy(
    router: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Routable> {
    return super.deploy(router, overrides || {}) as Promise<Routable>;
  }
  getDeployTransaction(
    router: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(router, overrides || {});
  }
  attach(address: string): Routable {
    return super.attach(address) as Routable;
  }
  connect(signer: Signer): Routable__factory {
    return super.connect(signer) as Routable__factory;
  }
  static readonly contractName: 'Routable';
  public readonly contractName: 'Routable';
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RoutableInterface {
    return new utils.Interface(_abi) as RoutableInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Routable {
    return new Contract(address, _abi, signerOrProvider) as Routable;
  }
}
