/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import { Provider, TransactionRequest } from '@ethersproject/providers';
import type { RoutableMock, RoutableMockInterface } from '../RoutableMock';

const _abi = [
  {
    inputs: [
      {
        internalType: 'address',
        name: 'router',
        type: 'address',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'previousRouter',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'newRouter',
        type: 'address',
      },
    ],
    name: 'RouterTransferred',
    type: 'event',
  },
  {
    inputs: [],
    name: 'openFunction',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'routedFunction',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'router',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'newRouter',
        type: 'address',
      },
    ],
    name: 'transferRouter',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
];

const _bytecode =
  '0x608060405234801561001057600080fd5b5060405161041d38038061041d83398101604081905261002f9161007e565b600080546001600160a01b0319166001600160a01b03831690811782556040518392907ff38c14967d50d29fa2223efd2644004cbc5df42d86d956da07481996fc507ced908290a350506100ac565b60006020828403121561008f578081fd5b81516001600160a01b03811681146100a5578182fd5b9392505050565b610362806100bb6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063268d79951461005157806346be982e14610066578063b46c0b1014610083578063f887ea401461008b575b600080fd5b61006461005f3660046102fe565b6100a6565b005b61006e6100b2565b60405190151581526020015b60405180910390f35b61006e610119565b6000546040516001600160a01b03909116815260200161007a565b6100af8161019a565b50565b600080546001600160a01b03163314156101135760405162461bcd60e51b815260206004820152601e60248201527f526f757461626c653a2043616c6c65722069732074686520726f75746572000060448201526064015b60405180910390fd5b50600190565b600080546001600160a01b031633146101135760405162461bcd60e51b815260206004820152602260248201527f526f757461626c653a2043616c6c6572206973206e6f742074686520726f757460448201527f6572000000000000000000000000000000000000000000000000000000000000606482015260840161010a565b6001600160a01b0381166102165760405162461bcd60e51b815260206004820152602860248201527f526f757461626c653a204e657720726f7574657220697320746865207a65726f60448201527f2061646472657373000000000000000000000000000000000000000000000000606482015260840161010a565b6000816001600160a01b03163b116102965760405162461bcd60e51b815260206004820152602660248201527f526f757461626c653a204e657720726f75746572206973206e6f74206120636f60448201527f6e74726163740000000000000000000000000000000000000000000000000000606482015260840161010a565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917ff38c14967d50d29fa2223efd2644004cbc5df42d86d956da07481996fc507ced9190a35050565b60006020828403121561030f578081fd5b81356001600160a01b0381168114610325578182fd5b939250505056fea2646970667358221220a01e416437d663f2d18ff9f1c5f962b74152fdd936c4009bd60a29cff6494c1764736f6c63430008040033';

type RoutableMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RoutableMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class RoutableMock__factory extends ContractFactory {
  constructor(...args: RoutableMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = 'RoutableMock';
  }

  deploy(
    router: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<RoutableMock> {
    return super.deploy(router, overrides || {}) as Promise<RoutableMock>;
  }
  getDeployTransaction(
    router: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(router, overrides || {});
  }
  attach(address: string): RoutableMock {
    return super.attach(address) as RoutableMock;
  }
  connect(signer: Signer): RoutableMock__factory {
    return super.connect(signer) as RoutableMock__factory;
  }
  static readonly contractName: 'RoutableMock';
  public readonly contractName: 'RoutableMock';
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RoutableMockInterface {
    return new utils.Interface(_abi) as RoutableMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): RoutableMock {
    return new Contract(address, _abi, signerOrProvider) as RoutableMock;
  }
}
