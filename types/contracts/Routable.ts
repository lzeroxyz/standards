/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import { Listener, Provider } from '@ethersproject/providers';
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export interface RoutableInterface extends utils.Interface {
  contractName: 'Routable';
  functions: {
    'router()': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'router', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'router', data: BytesLike): Result;

  events: {
    'RouterTransferred(address,address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'RouterTransferred'): EventFragment;
}

export type RouterTransferredEvent = TypedEvent<
  [string, string],
  { previousRouter: string; newRouter: string }
>;

export type RouterTransferredEventFilter =
  TypedEventFilter<RouterTransferredEvent>;

export interface Routable extends BaseContract {
  contractName: 'Routable';
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RoutableInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    router(overrides?: CallOverrides): Promise<[string]>;

    'router()'(overrides?: CallOverrides): Promise<[string]>;
  };

  router(overrides?: CallOverrides): Promise<string>;

  'router()'(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    router(overrides?: CallOverrides): Promise<string>;

    'router()'(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    'RouterTransferred(address,address)'(
      previousRouter?: string | null,
      newRouter?: string | null
    ): RouterTransferredEventFilter;
    RouterTransferred(
      previousRouter?: string | null,
      newRouter?: string | null
    ): RouterTransferredEventFilter;
  };

  estimateGas: {
    router(overrides?: CallOverrides): Promise<BigNumber>;

    'router()'(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    router(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'router()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
