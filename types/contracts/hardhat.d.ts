/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "Routable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Routable__factory>;
    getContractFactory(
      name: "IArbitrable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IArbitrable__factory>;
    getContractFactory(
      name: "IArbitrator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IArbitrator__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "OwnableMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnableMock__factory>;
    getContractFactory(
      name: "RoutableMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RoutableMock__factory>;
    getContractFactory(
      name: "RoutableRouterMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RoutableRouterMock__factory>;
    getContractFactory(
      name: "PausableMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PausableMock__factory>;
    getContractFactory(
      name: "ERC1155Mock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1155Mock__factory>;
    getContractFactory(
      name: "ERC1155NonReceiverMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1155NonReceiverMock__factory>;
    getContractFactory(
      name: "ERC1155ReceiverMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1155ReceiverMock__factory>;
    getContractFactory(
      name: "ERC1155MetadataGlobalURIMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1155MetadataGlobalURIMock__factory>;
    getContractFactory(
      name: "ERC1155MetadataMultipleURIMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1155MetadataMultipleURIMock__factory>;
    getContractFactory(
      name: "Pausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Pausable__factory>;
    getContractFactory(
      name: "ERC1155",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1155__factory>;
    getContractFactory(
      name: "ERC1155MetadataGlobalURI",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1155MetadataGlobalURI__factory>;
    getContractFactory(
      name: "ERC1155MetadataMultipleURI",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1155MetadataMultipleURI__factory>;
    getContractFactory(
      name: "IERC1155",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155__factory>;
    getContractFactory(
      name: "IERC1155MetadataURI",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155MetadataURI__factory>;
    getContractFactory(
      name: "IERC1155TokenReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155TokenReceiver__factory>;

    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "Routable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Routable>;
    getContractAt(
      name: "IArbitrable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IArbitrable>;
    getContractAt(
      name: "IArbitrator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IArbitrator>;
    getContractAt(
      name: "ERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "OwnableMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnableMock>;
    getContractAt(
      name: "RoutableMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RoutableMock>;
    getContractAt(
      name: "RoutableRouterMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RoutableRouterMock>;
    getContractAt(
      name: "PausableMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PausableMock>;
    getContractAt(
      name: "ERC1155Mock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1155Mock>;
    getContractAt(
      name: "ERC1155NonReceiverMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1155NonReceiverMock>;
    getContractAt(
      name: "ERC1155ReceiverMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1155ReceiverMock>;
    getContractAt(
      name: "ERC1155MetadataGlobalURIMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1155MetadataGlobalURIMock>;
    getContractAt(
      name: "ERC1155MetadataMultipleURIMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1155MetadataMultipleURIMock>;
    getContractAt(
      name: "Pausable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Pausable>;
    getContractAt(
      name: "ERC1155",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1155>;
    getContractAt(
      name: "ERC1155MetadataGlobalURI",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1155MetadataGlobalURI>;
    getContractAt(
      name: "ERC1155MetadataMultipleURI",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1155MetadataMultipleURI>;
    getContractAt(
      name: "IERC1155",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155>;
    getContractAt(
      name: "IERC1155MetadataURI",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155MetadataURI>;
    getContractAt(
      name: "IERC1155TokenReceiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155TokenReceiver>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
